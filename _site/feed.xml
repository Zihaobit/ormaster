<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Q.Liu</title>
    <description>Welcome to Q.Liu's Homepage. Here you can find something about my research interests.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 05 Oct 2018 16:05:34 +0800</pubDate>
    <lastBuildDate>Fri, 05 Oct 2018 16:05:34 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>git tutorial</title>
        <description>&lt;h3 id=&quot;git基本概念&quot;&gt;Git基本概念&lt;/h3&gt;

&lt;p&gt;Git将文件的状态分为三类，包括workding directory, index 和 HEAD。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;任何未被git进行管理的文件成为working directory&lt;/li&gt;
  &lt;li&gt;通过git add操作将文件纳入git管理，此时称之为index/staging（临时）&lt;/li&gt;
  &lt;li&gt;通过git commit操作将转为HEAD状态&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;HEAD状态的文件可以传输到remote的仓库，对于从本地开始新建的git项目，通过git remote add origin ssh_url（给远程仓库取了名称叫做origin）；对于git clone的项目， git已经知道要push的remote repo。&lt;/p&gt;

&lt;h3 id=&quot;git初始化&quot;&gt;Git初始化&lt;/h3&gt;

&lt;p&gt;Git初始化包括多中场景：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;从本地已有的文件夹添加git，使用git init，会在本地生成.git文件夹&lt;/li&gt;
  &lt;li&gt;从远程clone已经建立好的git仓库，会在本地生成.git文件夹，并添加remote&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;拉去coworker的操作&quot;&gt;拉去coworker的操作&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;git pull将远程仓库的所有内容拉到本地。等价于git fetch + git merge。使用–rebase将第二个操作从merge改为rebase&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;分支将自己的操作上传到独立的分支在分支进行代码版本管理最终与master分支合并&quot;&gt;分支：将自己的操作上传到独立的分支，在分支进行代码版本管理，最终与master分支合并&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;git branch brand_name 创建分支&lt;/li&gt;
  &lt;li&gt;git checkout brand_name 切换到分支&lt;/li&gt;
  &lt;li&gt;git checkout -b brand_name 创建分支并切换&lt;/li&gt;
  &lt;li&gt;git branch -d 删除分支&lt;/li&gt;
  &lt;li&gt;git push origin :brand_name 删除远程分支&lt;/li&gt;
  &lt;li&gt;git merge brand_name 在master分支下合并brand_name分支&lt;/li&gt;
  &lt;li&gt;git rebase brand_name&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;merge&lt;/strong&gt; 将分支与master合并：使用git merge brand_name将brand_name的分支合并到由checkout切换到的当前分支。
比如在master分支下执行git merge brand_name，会将brand_name分支的内容通过fast-forward(master分支相比于brand_name没有任何更新)的方法合并到master上(master的HEAD直接移动到brand_name的HEAD上)，如果master分支有更新别的内容，合并到master时会自动生成一次commit（master和brand_name的HEAD合并到下一个共同的HAED结点）.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rebase&lt;/strong&gt; 不同于merge将master HEAD移动到分支HEAD结点，或者建立master和branch的共同子结点的方法；rebase是将branch“平移”到master分支后，最终形成一条直接。&lt;/p&gt;

&lt;p&gt;merge是将两个分支的修改合并到一起，rebase是提取当前分支的修改，复制到目标分支的最新提交后。&lt;/p&gt;

&lt;h3 id=&quot;修改提交&quot;&gt;修改提交&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;git add somefile.py + git commit –amend 把对somefile文件的修改合并到上一次commit中&lt;/li&gt;
  &lt;li&gt;git reset –hard HEAD~~ 用来撤销全面两次commit, ~~或者~2表示往前追溯两代&lt;/li&gt;
  &lt;li&gt;git rebase -i HEAD~~ 用来合并最近两字提交，将需要被合并的commit前的pick改为squash&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 05 Oct 2018 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2018/10/05/git/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2018/10/05/git/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Pytorch摘要</title>
        <description>&lt;h2 id=&quot;pytorch&quot;&gt;Pytorch&lt;/h2&gt;

&lt;p&gt;不同于Tensorflow(not include eager execution)这种基于&lt;strong&gt;静态计算图&lt;/strong&gt;的深度学习框架，Pytorch是基于&lt;strong&gt;动态图&lt;/strong&gt;的。首先要理解什么是静态/动态图：静态图是一次性定义好计算图框架，然后将数据批量地输入进行训练，评估；动态图是每次计算都是一个计算图。&lt;/p&gt;

&lt;p&gt;这两种设计模式上的区别就导致了Tensorflow在某些场景下有点捉襟见肘。while循环是一个经典的应用场景，在tensorflow里只能使用tf.while_loop来定义while循环的条件和运行内容, 而pytorch的话可以直接使用python内置的while语句。更进一步，tensorflow在定义RNN传入的数据[batch_size, time_step, inputs]不能同时将batch_size和time_step设置为-1。当每个训练样本的time step长度不一致时，一般的处理方式是进行padding，补成相同的长度。如果要实现真正意义上的不同time step，需要将batch_size固定，使用dynamic rnn传入time step为-1。而在pytorch中batch_size和time_step可以都不确定。&lt;/p&gt;

&lt;h3 id=&quot;常用操作&quot;&gt;常用操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;torch.autograd.Variable &lt;br /&gt;
是pytorch的核心类，它包装了张量，当对其调用backward()方法是，会自动进行梯度计算。Variable包含几个属性：data（返回原始张量）, 所有的梯度回累计到grad属性上（grad本身也是一个Variabl
)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;model.train() / model.eval() 
在训练模型/评估模型的开始调用上述语句，切换模式，用于区分train/evaluation阶段的drop out/固定batch normalizaiton值等操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;with torch.no_grad(): &lt;br /&gt;
一种context-manager，下文的内容均取消梯度计算的操作，如果确定下文内容不会调用Tensor.backward()则可以加入该操作，用以减少计算梯度带来的内存消耗, 因此一般用于evaluation阶段。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;torch.Tensor.detach() &lt;br /&gt;
截断反向传播的梯度流, returns a new Variable, detached form the current graph.
将某个node转为不需要梯度的Variable, 当反向传播经过该node时，梯度不会再往前传播。一种使用场景用于RNN模型，在不同的batch之间截断c_t和h_t&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;torch.mm.Module.zero_grad() &lt;br /&gt;
将缓冲区所有变量参数设置为0。zero the parameter gradients。经常和Tensor.detach()搭配使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;backward() &lt;br /&gt;
对于loss，调用backward()用以计算梯度。如果Variable是表量（包含一个元素）可以直接调用backward, 如果是有多个元素需要指定gradient参数，其shape与输入的shape一致。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tensor.cuda() &lt;br /&gt;
使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.cuda&lt;/code&gt;方法将tensors在GPU上运行&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tensor运算&quot;&gt;tensor运算&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;tensor.narrow(dim, start, size) &lt;br /&gt;
从原始向量的第dim维上从start开始索引size个。dim为0按行，dim为1按列。一般用于截取子tensor。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tensor.t() &lt;br /&gt;
将向量0，1维度做转置，相当于tensor.transpose(o, 1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tf.nn.embedding(num_embeddings, embedding_dim)(input)  &lt;br /&gt;
对模型输入embedding, 比如输入tf.nn.embedding(10, 3)([[1, 2, 3, 4], [4, 5, 6, 9]])会输出shape为(2, 4, 3)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;torch.stack(seq, dim=0, out=None) &lt;br /&gt;
将tensor的list进行concatenation, dim=0时，将一个原始list(存有10个长度为5的tensor), 按行level拼接成一个shape为10, 5的tensor。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tensor.squeeze() &lt;br /&gt;
将所有维度为1的删除掉。比如input原始shape为10&lt;em&gt;1&lt;/em&gt;5, 删除后为10*5。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tensor.div(value) &lt;br /&gt;
对原tensor中每一个元素都除以一个值value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tensor.operator_ &lt;br /&gt;
y.add_(x), x.t_()等操作函数后加一个下划线，都是直接改变原张量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tensor与numpy的转换  &lt;br /&gt;
通过tensor.numpy()将张量转为numpy, 两者共享一个内存空间。
通过torch.from_num(np.zeros(5))将numpy转化为tensor, 同样共享内存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# (2, 2, 2, 2, 2)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(2, 2, 2, 2, 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tensor.permute(*dims)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;交换数据维度，如果对二维矩阵进行tensor.permute(1, 0)相当于进行转置。&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Aug 2018 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2018/08/17/pytorch/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2018/08/17/pytorch/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Docker Best Practice</title>
        <description>&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is a &lt;em&gt;golang&lt;/em&gt; based open source container tool. In a typical way, one container runs a web server and web application, while a second container runs a database server. They are both isolated from server holds the containers.&lt;/p&gt;

&lt;h3 id=&quot;docker-基本概念&quot;&gt;Docker 基本概念&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;镜像与容器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;是包含需要运行文件的&lt;strong&gt;只读&lt;/strong&gt;镜像，在其上面添加可以读写层从而形成容器&lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;. image有两种获取方式: 从Dockerfile build，或者从docker hub/registry拉取。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;网络通信&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;docker默认是用虚拟网络接口进行birdge桥接。docker本身会创建一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;docker0&lt;/code&gt;的虚拟以太桥接，各个容器会创建名为&lt;code class=&quot;highlighter-rouge&quot;&gt;vethxxxx&lt;/code&gt;的网络接口，容器们和宿主机之间的通信都是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker0&lt;/code&gt;完成。&lt;/p&gt;

&lt;h3 id=&quot;docker-指令&quot;&gt;Docker 指令&lt;/h3&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/docker.jpg&quot; width=&quot;570&quot; height=&quot;380&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker create&lt;/code&gt;: create a read-write layer(Unioned RW File System) on the top of image&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker start&lt;/code&gt;: create a isolated process space for file system&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;: equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;docker create&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;docker start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker commit&lt;/code&gt;: 将container的变化封装为一个新的镜像&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker tag&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;docker push&lt;/code&gt;将镜像上传为private registry &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker tag test_image host_to_private_registry/test_image&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker push host_to_private_registry/test_image&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;常见问题&quot;&gt;常见问题&lt;/h3&gt;

&lt;p&gt;docker container与docker host端口的互相访问：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;查看host机的inet addr(一般为eth0), 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect container_name&lt;/code&gt;
查看容器的ip地址，两者可以互相访问。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;时设置参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--network= host&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在18.03版本之后，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;host.docker.internal&lt;/code&gt;代替localhost来访问host的端口。(未验证)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同一host下的docker containers互相通信：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;理论上直接两个container的ip地址互ping，是可以连同的，但由于ip地址是容器启动时随机分配的，直接写死互相访问的ip地址是不合理的。解决方案是用–link，该参数会在iptable里分别给两个容器创建一条accept规则，允许互相访问开放的端口。操作步骤，在创建完container_a之后, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run contianer_b&lt;/code&gt;时, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--link container_a:a&lt;/code&gt;即可在容器b里使用&lt;code class=&quot;highlighter-rouge&quot;&gt;curl a:port&lt;/code&gt;访问容器a的端口。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 17 Jul 2018 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2018/07/17/Docker/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2018/07/17/Docker/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Elasticsearch</title>
        <description>&lt;h2 id=&quot;elasticsearch-tutorial&quot;&gt;Elasticsearch Tutorial&lt;/h2&gt;

&lt;p&gt;Lucene是Apache下的文本搜索引擎，而Elasticsearch是以lucene作为内核的，JSON based, distributed 网络服务。因此可以把Elasticsearch看作lucene封装后的分析引擎。&lt;/p&gt;

&lt;h3 id=&quot;easticsearch-基本概念&quot;&gt;Easticsearch 基本概念&lt;/h3&gt;

&lt;p&gt;Document: 文档，以key-value的形式存储。Lucene把文档下不同类型(string, integer, date等)都看作是bytes。 &lt;br /&gt;
Index索引：相当于database。
Type类型: 描述同一类document, 相当于表名。
Mapping: 数据库的schema, 记录Type的字段、属性一集字段的数据类型、索引方式&lt;/p&gt;

&lt;p&gt;Elasticsearch的查询语言称为Query DSL(Query Domin-Specific-languasge)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch的文档索引方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;倒排索引(inverted-index): 对于所有文档unique的词汇，维护一个出现文档的列表。从而当查询某几个词汇时，根据文档包含各词汇的数目，按相关性排序并返回。形式：word1: doc1, doc2; word2: doc1; word3: doc1, doc3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doc values: 当使用aggs用terms对某一文本field进行分桶计数时，倒排索引需要对每个word进行group by计数，效率十分低，因此一般采用doc values, 具体而言就是对倒排索引进行转置。doc1： word1, word2, word3; doc2: word4, word5. 这时计算唯一word(或者叫做token)的计数就更方便。和倒排索引一样，Doc, values一样默认对所有字段(数字、经纬度、日期、IP、not_analyzed字符串)开启。对于analysed的字符串，如果要使用terms桶，需要将该字段设置成fielddata，该操作将会对analysed字段生成doc values并存储在内存中，因此要谨慎该操作。更谨慎的做法是将该字段设置为not_analysed。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch数据类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;GET indexname/_mapping&lt;/code&gt;获取mapping信息, 完整的数据类型见&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;string: 包括text和keyword两种类型。前者一般用于长文本，是analyzed。后者一般用于类似于email地址，hostnames, status code, tags这种的短文本。但默认(?)情况下，一个字段如果是text类型的，则包含一个feilds的属性, 以支持子字段&lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt;, 该子字段的type是keyword, 因此同一个字段支持多种方式的索引方式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elasticsearch-put&quot;&gt;Elasticsearch Put&lt;/h3&gt;

&lt;p&gt;使用put插入数据, 下面向longhash/employee表插入_id为1的document。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XPUT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost:9200/longhash/employee/1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{
    &quot;first_name&quot;: &quot;qianchao&quot;,
    &quot;last_name&quot;: &quot;liu&quot;,
    &quot;age&quot;: &quot;24&quot;,
    &quot;interests&quot;: [&quot;programming&quot;, &quot;sport&quot;]
}

'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;elasticsearch-query-language&quot;&gt;Elasticsearch Query Language&lt;/h3&gt;

&lt;p&gt;检索数据库的语法格式：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XGET&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost:9200/longhash/employee/_search'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{
    &quot;query&quot;:{
        &quot;match&quot;:{
            &quot;last_name&quot;: &quot;liu&quot;
        }
    },
    &quot;highlight&quot;: {
        &quot;fields&quot;: {
            &quot;age&quot;:{}
        }
    }
}


'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;from-size-子列约束&quot;&gt;from, size, 子列约束&lt;/h4&gt;

&lt;p&gt;通过from设置从第几个结果开始
size则相当用limit
fileds:[“subcolumn”]用来约束要返回的子列, 但默认情况下fileds的支持是不开启的，官方更建议使用“_source”:[“subcolumn”]&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;_source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;query_string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;message:bitcoin&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;term&quot;&gt;term&lt;/h4&gt;

&lt;p&gt;term要求完全匹配(and关系)传入的值。&lt;/p&gt;

&lt;p&gt;term: 单条查询&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;bitcoin&quot;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;terms: 多条查询, 通过minimum_match确定至少符合条件的数目&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;bitcoin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;ethereum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;minimum_match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;match查询&quot;&gt;match查询&lt;/h4&gt;

&lt;p&gt;不同于term的完全匹配，match默认对字符串是分词后全文搜索Query(对数字、时间、bool或者not_analyzed字段仍是精确匹配Filter），并根据tf-idf值排序后返回结果, 可以使用operator该修改or的逻辑：
match使用operator来设置匹配模式：and/or&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;keyword1 keyword2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;and&quot;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用slop匹配缺失值, slop为缺省内容的数目, 下面的语句会返回所有keyword1 xxx xxx keyword4&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;keyword1 keyword4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;slop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用multi_match，来对不同的字段，使用相同的规则, 只要有一个字段满足条件就会返回数据&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;multi_match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;bitcoin&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;bool&quot;&gt;bool&lt;/h4&gt;

&lt;p&gt;所有符合条件都需要使用bool语句&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“must”:  必须匹配&lt;/li&gt;
  &lt;li&gt;“should”:  至少满足一个&lt;/li&gt;
  &lt;li&gt;“must_not”: 不满足&lt;/li&gt;
  &lt;li&gt;“filter”: 必须匹配，但不评分&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;filtered&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;filter&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                
                    &lt;span class=&quot;s&quot;&gt;&quot;bool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot;must&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bitcoin&quot;&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot;should&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot;must_not&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;eos&quot;&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;




    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;exists-missing&quot;&gt;exists, missing&lt;/h4&gt;

&lt;p&gt;相当于sql中的is not null和is null&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;exists&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;filter&quot;&gt;filter&lt;/h4&gt;

&lt;p&gt;上面我们写了很多条件筛选的语句，那么为什么这还需要&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;关键词？这里是因为非filter的查询一般会进行doc评分，所以速度回比较慢，而一旦指定了filter查询，则进行精确查询。&lt;/p&gt;

&lt;p&gt;例1， 使用term，将默认进行文档评分&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例2，使用constant_score，取消文档评分, 常用来代替只有filter的bool语句&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;constant_score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例3， 但当使用constan_score：filter: term查询文本时，如果文本字段是analyzed时，使用term会抹去大小写，符号等，从而无法实现精确值查询，为避免该问题，需要将字段index设置为not_analyzed.&lt;/p&gt;

&lt;h4 id=&quot;sort&quot;&gt;sort&lt;/h4&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;&quot;bool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;&quot;must&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;nv&quot;&gt;&quot;tweet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;some text&quot;&lt;/span&gt;
                 &lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;nv&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
             &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nv&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;desc&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;&quot;_score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;desc&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;aggregation&quot;&gt;aggregation&lt;/h4&gt;

&lt;p&gt;buckets: 使用group by将文档划分成符合不同条件的子集。&lt;/p&gt;

&lt;p&gt;metrics：count(), sum(), max()等计算。&lt;/p&gt;

&lt;p&gt;查询各个颜色产品的数量。这里使用bucket的方式是terms, 其他分桶的方法包括histogram(field, interval), date_histogram(filed, interval) 。但上述两种histogram默认只返回文档数目非0的桶，如果想要x axis连续，需要设置两个额外的参数：”min_doc_count”:0, “extended_bounds”: {“min”: “2018-05-01”, “max”:”2018-06-01”}&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;只返回&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的结果。&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;name_your_bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;terms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;&quot;filed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;color&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里是一个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;桶，每个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;动态创建一个桶。&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询各个颜色产品的的平均价格，这里使用的metrics是avg, 其他常用的包括max, min, sum, extended_stats, percentiles等：&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;name_your_bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;terms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里是一个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;桶，每个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;动态创建一个桶。&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;&quot;filed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;color&quot;&lt;/span&gt; 
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;&quot;name_your_metrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;&quot;avg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里是一个&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;度量&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;price&quot;&lt;/span&gt;
                    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面仅仅是进行聚合，如果想要加入筛选需要指定query的内容。上面的两个查询等价于在query里使用match_all。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;bool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;&quot;year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;name_your_bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;terms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;color&quot;&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;cardinality&lt;/code&gt;实现&lt;code class=&quot;highlighter-rouge&quot;&gt;distinct&lt;/code&gt;，相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;select distinct(color) from table&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;&quot;name_your_result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;&quot;cardinality&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;color“
            }
        }
    }
}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 17 May 2018 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2018/05/17/elasticsearch/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2018/05/17/elasticsearch/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Spark Tutorial</title>
        <description>&lt;h2 id=&quot;spark-tutorial&quot;&gt;Spark Tutorial&lt;/h2&gt;

&lt;h3 id=&quot;1-spark计算原理&quot;&gt;1 Spark计算原理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RDD&lt;/strong&gt;(Resilient Distributed Dataset)弹性分布式数据，其中Resilent使用replicate（冗余备份）。Spark使用sparkcontext.textfile加载本地文件或内存中的数据变成RDD，通过transformation操作定义新的RDD（懒计算，这里只是定义），最终使用action执行计算并存储到外部节点。&lt;/p&gt;

&lt;p&gt;常见的Transformation包括map, filter, groupby, join等，输入RDD，返回RDD。&lt;/p&gt;

&lt;p&gt;常见的Action包括count, collect, reduce, fold, aggregate等，输入RDD，以python(或scala等)对象的形式返回一个值或结果。&lt;/p&gt;

&lt;p&gt;过程构造DAG计算依赖图，提交给DAGScheduler，DAGScheduler会将任务划分为多个stage，每个stage都是一个任务集。前部分的stages做Map, 后部分的stages做Reduce，中间使用shuffle连接。shuffle将Map的结果通过序列化、反序列化(CPU将对象和二进制之间的转换)、跨节点IO和磁盘IO等操作传递给Reduce。DAGScheduler计算得到各stages之间的依赖关系，并将任务集提交给TaskScheduler,TaskScheduler将认为分发给excutor运行，执行结果先反馈给TaskScheduler，然后反馈给DAGScheduler&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DataFrame&lt;/strong&gt; 大部分情况下, RDD还是用来对数据集进行基本的转换, 它的数据是非结构化的(以parallelize存储list集合为例，每个item以java对象的形式存储，不同的item在集群中分布式存储), DataFrame则更适合处理结构化的（以Row对象的形式在集群中分布式存储，并且Spark知道row对象的列名、列数据类型等），关系型数据(table in relational database)。DataFrame支持map, filter, aggregate, average, sum, SQL直接操作。Datafram可以通过调用.rdd直接转换为RDD数据。&lt;/p&gt;

&lt;h3 id=&quot;21-spark-rdd-api&quot;&gt;2.1 Spark RDD API&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Transformation&lt;/code&gt;：&lt;/p&gt;

&lt;h4 id=&quot;rddcache&quot;&gt;rdd.cache()&lt;/h4&gt;

&lt;p&gt;对RDD进行持久化，把它保存到内存中。当数据被反复访问时，进行持久化是十分必要的。 cache并不是action, 执行它的时候没有触发task。&lt;/p&gt;

&lt;h4 id=&quot;rddmap&quot;&gt;rdd.map()&lt;/h4&gt;

&lt;p&gt;对RDD中每个元素执行一个指定的函数，生成一个新的RDD，任何原RDD中的元素在新的RDD中都有一个元素与之对应。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# ((1, 100, 1), (2, 200, 4), (3, 300, 9))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddflatmap&quot;&gt;rdd.flatMap()&lt;/h4&gt;

&lt;p&gt;与map类似，只是将结果转为一维。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# (1, 100, 1, 2, 200, 4, 3, 300, 9))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddglom&quot;&gt;rdd.glom()&lt;/h4&gt;

&lt;p&gt;flattens elements on the same partition&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [[1], [2, 3]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddmappartitions&quot;&gt;rdd.mapPartitions()&lt;/h4&gt;

&lt;p&gt;map将指定函数应用于输入的RDD的每个元素，mapPartition则将输入函数应用于每个分区。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapPartitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [[1], [2, 3]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#[[1], [5]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddmappartitionswithindex&quot;&gt;rdd.mapPartitionsWithIndex()&lt;/h4&gt;

&lt;p&gt;在mapPartitions的基础上加上partition index&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapPartitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [[1], [2, 3]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#[[(0, 1)], [(1, 5)]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddgetnumpartitions&quot;&gt;rdd.getNumPartitions()&lt;/h4&gt;

&lt;p&gt;返回RDD的partition数目&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPartitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddfilter&quot;&gt;rdd.filter()&lt;/h4&gt;

&lt;p&gt;返回符合过滤条件的元素&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [1,3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rdddistince&quot;&gt;rdd.distince()&lt;/h4&gt;

&lt;p&gt;去除重复元素&lt;/p&gt;

&lt;h4 id=&quot;rddsample&quot;&gt;rdd.sample()&lt;/h4&gt;

&lt;p&gt;做抽样，第一个参数withReplacement=True/False表示是否有放回抽样， 第二个参数fraction表示比例，第三个参数设置seed&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [0, 1, 2, 4, 6]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [0, 1, 3, 6]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [1, 5]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [0, 1, 4, 5, 6]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddtakesample&quot;&gt;rdd.takeSample()&lt;/h4&gt;

&lt;p&gt;rdd.sample()的一种替代，第二参数为num表示抽样的数量。直接返回collection，而非rdd，因此不用再调用collect()&lt;/p&gt;

&lt;h4 id=&quot;rddunion&quot;&gt;rdd.union()&lt;/h4&gt;

&lt;p&gt;合并两个rdd&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1, 2, 3, 4, 5, 6, &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddintersection&quot;&gt;rdd.intersection()&lt;/h4&gt;

&lt;p&gt;与union使用方法按类似，求两个rdd的共同元素&lt;/p&gt;

&lt;h4 id=&quot;rddcartesian&quot;&gt;rdd.cartesian()&lt;/h4&gt;

&lt;p&gt;返回笛卡尔乘积 [1,2] -&amp;gt;  [(1, 1), (1, 2), (2, 1), (2, 2)]&lt;/p&gt;

&lt;h4 id=&quot;rddsorby&quot;&gt;rdd.sorBy()&lt;/h4&gt;

&lt;p&gt;按照规则对元素排序&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Apple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# sort by first character&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# ['Apple', 'Bat', 'Cat']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddsortbykey&quot;&gt;rdd.sortByKey()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortByKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [('B', 1), ('A', 2), ('C', 3)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [('A', 2), ('B', 1), ('C', 3)]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddgroupby&quot;&gt;rdd.groupBy()&lt;/h4&gt;

&lt;p&gt;按照条件把元素归到各group&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (0, [0, 3])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (2, [2, 5])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (1, [1, 4])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddpipe&quot;&gt;rdd.pipe()&lt;/h4&gt;

&lt;p&gt;将元素传递给外部进程&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [u'1', u'2', u'3']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddforeach&quot;&gt;rdd.foreach()&lt;/h4&gt;

&lt;p&gt;Applies a funtion to all elements of this rdd, similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# foreach returns None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddforeachpartition&quot;&gt;rdd.foreachPartition()&lt;/h4&gt;

&lt;p&gt;map-&amp;gt; mapPartitions 与 foreach -&amp;gt; foreachPartition的关系&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Actions&lt;/code&gt;：&lt;/p&gt;

&lt;h4 id=&quot;reduce&quot;&gt;reduce&lt;/h4&gt;

&lt;p&gt;将前两个元素传入函数，产生新的值，逐个将新的值和下个元素传入到函数中。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddfold&quot;&gt;rdd.fold()&lt;/h4&gt;

&lt;p&gt;将同一个partition下的元素做聚合，然后再聚合各个partition&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neutral_zero_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neutral_zero_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddaggregate&quot;&gt;rdd.aggregate()&lt;/h4&gt;

&lt;p&gt;reduce 和 fold都要求中间返回值与rdd中元素的数据类型保持一致，而aggregate则没有这个限制。 &lt;br /&gt;
seqOp和comOp可以理解为先进行在partition内做使用seqOp做reduce操作，后使用comOp在partitions之间做操作。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# compute summation and production&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neutral_zero_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seqOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;comOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neutral_zero_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seqOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(9, 24)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddtop&quot;&gt;rdd.top()&lt;/h4&gt;

&lt;p&gt;以list形式返回最大的k各元素&lt;/p&gt;

&lt;h4 id=&quot;rddtakeorderednumsk&quot;&gt;rdd.takeOrdered(nums=k)&lt;/h4&gt;

&lt;p&gt;返回最小的k个元素&lt;/p&gt;

&lt;h4 id=&quot;rddtakenumk&quot;&gt;rdd.take(num=k)&lt;/h4&gt;

&lt;p&gt;返回数据的前k个元素&lt;/p&gt;

&lt;h4 id=&quot;rddfirst&quot;&gt;rdd.first&lt;/h4&gt;

&lt;p&gt;返回第一个元素&lt;/p&gt;

&lt;h4 id=&quot;rddhistogrambucketsk&quot;&gt;rdd.histogram(buckets=k)&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# [1 2), [2, 3] 以2作为x axis分界值，count分别为2，3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;other &lt;code class=&quot;highlighter-rouge&quot;&gt;transformation&lt;/code&gt;s：&lt;/p&gt;

&lt;h4 id=&quot;rddcollectasmap&quot;&gt;rdd.collectAsMap()&lt;/h4&gt;

&lt;p&gt;输入rdd，返回dict&lt;/p&gt;

&lt;h4 id=&quot;rddkeys&quot;&gt;rdd.keys()&lt;/h4&gt;

&lt;p&gt;输入rdd, 返回keys组成的list&lt;/p&gt;

&lt;h4 id=&quot;rddvalues&quot;&gt;rdd.values()&lt;/h4&gt;

&lt;p&gt;同上，返回values&lt;/p&gt;

&lt;h4 id=&quot;rddreducebykey&quot;&gt;rdd.reduceByKey()&lt;/h4&gt;

&lt;p&gt;针对kv结构的数据，将相同的key的values放到一起，执行一个reduce操作&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduceByKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rddcountbykey&quot;&gt;rdd.countByKey()&lt;/h4&gt;

&lt;p&gt;使用方法同上&lt;/p&gt;

&lt;h4 id=&quot;join&quot;&gt;join&lt;/h4&gt;

&lt;p&gt;inner join&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;combinebykey&quot;&gt;combineByKey()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createCombiner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# append to aggregated&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeComb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# append agg1 with agg2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combineByKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createCombiner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mergeVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mergeComb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;aggregatebykey&quot;&gt;aggregateByKey()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createCombiner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# append to aggregated&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeComb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agg2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# append agg1 with agg2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combineByKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createCombiner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mergeVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mergeComb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;foldbykey&quot;&gt;foldByKey()&lt;/h4&gt;

&lt;p&gt;合并同一key下的values&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldBykey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [(&quot;a&quot;:2), (&quot;b&quot;:1)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mapvalues&quot;&gt;mapValues()&lt;/h4&gt;

&lt;p&gt;对kv数据，对value进行map操作，不修改key&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;flatmapvalues&quot;&gt;flatMapValues()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMapValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;groupwith&quot;&gt;groupWith()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;keyby&quot;&gt;keyBy()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;zip&quot;&gt;zip()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;write-saveastextfile&quot;&gt;write: saveAsTextFile&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAsTextFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:///usr/local/spark/mycode/newpeople.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-spark-dataframe-api&quot;&gt;2.2 Spark DataFrame API&lt;/h3&gt;

&lt;h4 id=&quot;将rdd转为dataframe1-使用todf&quot;&gt;将RDD转为Dataframe：1. 使用toDF()&lt;/h4&gt;

&lt;p&gt;这种方法不需要手动指定schema&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:///usr/local/spark/people.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrReplaceTempView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Creates or replaces a local temporary view (session based view) with this DataFrame.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;将rdd转为dataframe2-使用sparkcreatedataframerowrdd-schema&quot;&gt;将RDD转为Dataframe：2. 使用spark.createDataFrame(rowRDD, schema)&lt;/h4&gt;

&lt;p&gt;将RDD转化为&lt;code class=&quot;highlighter-rouge&quot;&gt;Row(attributes[0], attributes[1])&lt;/code&gt;，即一系列row对象，最后在指定schema&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructType&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructField&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringType&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fildName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rowRDD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:///usr/local/spark/people.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowRDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dfshown20-dfheadn1-dftake-dflimit&quot;&gt;df.show(n=20), df.head(n=1), df.take(), df.limit()&lt;/h4&gt;

&lt;p&gt;show, head, take都是action, limit是transformation&lt;/p&gt;

&lt;p&gt;take会将得到的数据返回driver端，&lt;/p&gt;

&lt;h4 id=&quot;dfprintscheme&quot;&gt;df.printScheme()&lt;/h4&gt;

&lt;p&gt;print out the schema in the tree format&lt;/p&gt;

&lt;h4 id=&quot;dfselect&quot;&gt;df.select()&lt;/h4&gt;

&lt;p&gt;选择子列&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monotonically_increasing_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add index column&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dfcolid-dfapplyid&quot;&gt;df.col(“id”), df.apply(“id”)&lt;/h4&gt;

&lt;p&gt;只能获得一个column&lt;/p&gt;

&lt;h4 id=&quot;dfwithcolumn&quot;&gt;df.withColumn()&lt;/h4&gt;

&lt;p&gt;used to adding a column or replacing the existing column that has the same name&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'newColumn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dfdrop&quot;&gt;df.drop()&lt;/h4&gt;

&lt;p&gt;删除列，每次只能删除一列&lt;/p&gt;

&lt;h4 id=&quot;dffilter&quot;&gt;df.filter()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dfgroupbyagecountshow&quot;&gt;df.groupBy(“age”).count().show()&lt;/h4&gt;

&lt;h4 id=&quot;dfagg&quot;&gt;df.agg()&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;salary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;avg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# select&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'count(distinct DIGITAL_CUSTOMER_ID)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'n_item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'count(distinct DIGITAL_CUSTOMER_ID)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'n_item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dfsortdfagedesc-dfnameascshow&quot;&gt;df.sort(df.age.desc(), df.name.asc()).show()&lt;/h4&gt;

&lt;h4 id=&quot;dforderbydfagedesc--dforderby--dfage&quot;&gt;df.orderBy(df.age.desc) === df.orderBy(- df.age)&lt;/h4&gt;

&lt;h4 id=&quot;load--write&quot;&gt;load &amp;amp; write&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:///usr/local/spark/examples/src/main/resources/people.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;peopleDF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:///usr/local/spark/mycode/newpeople.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pyspark-dataframe-一些常用的行为&quot;&gt;pyspark dataframe: 一些常用的行为&lt;/h3&gt;

&lt;h4 id=&quot;dataframe-column-to-list&quot;&gt;dataframe column to list&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;substitude-to-get_dummies-in-pandas&quot;&gt;substitude to get_dummies in pandas&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;offers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OFFER_NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offers_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OFFER_NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OFFER_NAME_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email_df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offers_expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;count_values&quot;&gt;count_values&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'col'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'count'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;truncate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 10 May 2018 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2018/05/10/Spark/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2018/05/10/Spark/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>MCMC</title>
        <description>&lt;h3 id=&quot;和贝叶斯定理相关的那些统计方法&quot;&gt;和贝叶斯定理相关的那些统计方法&lt;/h3&gt;

&lt;p&gt;以贝叶斯定理为基础的统计学习方法有很多，包括最简单的贝叶斯推断(Bayes Reasoning)，我们之前的讲过的贝叶斯分类以及马尔可夫蒙特卡洛(MCMC)。&lt;/p&gt;

&lt;p&gt;同样是使用贝叶斯定理，那么它们的差别是什么呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;贝叶斯推断&lt;/strong&gt;：根据样本数据，可以通过极大似然估计的方法估计出其似然分布，假设先验分布已知，将似然分布和先验分布的概率密度函数相乘，可以得到后验分布的分布函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MCMC&lt;/strong&gt;: 对于贝叶斯推断而言，如果似然函数与先验函数共轭（导致先验分布和后验分布是同一种分布），这样将会简化计算后验分布的过程。但是大多情况下，两者并不一定是共轭的。在这种下MCMC是比较合适的解决方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;贝叶斯分类&lt;/strong&gt;: 这里我们把贝叶斯分类放在三者中最后一个讲，是因为前两者是典型的参数估计的方法，而贝叶斯分类(Naive Bayes等)是则是借助贝叶斯定理来计算一个样本属于某个类别的概率，是分类的方法。其并不需要得到后验分布的参数。&lt;/p&gt;

&lt;h3 id=&quot;关于mcmc的slides&quot;&gt;关于MCMC的Slides&lt;/h3&gt;

&lt;p&gt;MCMC可以被用来做参数估计。在研究生的一门课程中，我使用MCMC算法来估计混合高斯分布的几项参数。由于课程的需要，我制作了几页关于MCMC方法的介绍，下面给出相关内容。&lt;/p&gt;

&lt;p&gt;由于内容展示借助了Google的工具，想要完整地显示内容，可能需要科学上网。&lt;/p&gt;

&lt;iframe src=&quot;https://docs.google.com/file/d/1vN2Q1DepyQmZglVlFFdotYJdEyBFNo3Z/preview&quot; width=&quot;800px&quot; height=&quot;700px&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;另外关于MCMC实现细节的文章，我推荐看&lt;a href=&quot;http://twiecki.github.io/blog/2015/11/10/mcmc-sampling/&quot; target=&quot;_blank&quot;&gt;这篇&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Oct 2017 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2017/10/22/MCMC/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2017/10/22/MCMC/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Online Learning</title>
        <description>&lt;h3 id=&quot;0-question-description&quot;&gt;0. Question Description&lt;/h3&gt;

&lt;p&gt;  能否快速地迭代产品决定了其最终能否取得成功，比如通过引入风洞，莱特兄弟能够快速及时地测试、更新自己的设计，最终取得了试飞的成功。而在机器学习领域的“在线学习”则是为快速迭代模型应运而生的。其解决的核心问题是如何用新产生的用户数据，动态地更新我们训练好的模型。 &lt;br /&gt;
  理论上，如果机器学习算法在“上线”前，我们已经获取到“完全”的数据并且在模型空间中包含了“正确”模型，那么我们在线下就可以完成模型的训练。之所以要进行线上学习，是因为我们在算法上线前只掌握局部的、有偏的数据。 &lt;br /&gt;
  大部分的机器学习模型本身是不具备“持续”更新的特性的，比如经典的Logistic Regression, 其加入新的数据后，往往需要重新训练所有的参数。那么有没有什么更新模型的pipeline（注意在线学习不是一种新的机器学习的模型，其只是一种操作流程），可以使我们的模型能够在加入新数据后，不必重头开始训练呢？下面介绍两种最经典的思路: BPR(Bayesian Probit Regression)和FTRL(Follow The Regularized Leader).&lt;/p&gt;

&lt;h3 id=&quot;1-online-learning-and-regret-minimization&quot;&gt;1. Online Learning and regret minimization&lt;/h3&gt;
&lt;p&gt;  对于在线学习，我们最小化的目标一般叫做“后悔”(regret)。regret用来刻画我们的某种参数更迭方案与使用当前所有数据能得到的一组固定参数的差。用公式来表示&lt;strong&gt;Online Learning的目标&lt;/strong&gt;，对于每轮我们拿到的数据&lt;script type=&quot;math/tex&quot;&gt;z_t&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;regret_k = \frac{1}{k}\sum_{t=1}^{k}f(\theta_t, z_t)-min_{\theta^*\in \Theta}\frac{1}{k}\sum_{t=1}^{k}f(\theta^*, z_t)&lt;/script&gt;

&lt;p&gt;  我们希望能当k趋向于无穷时，&lt;script type=&quot;math/tex&quot;&gt;regret_k&lt;/script&gt;能趋向于0。这里可以对比一下&lt;strong&gt;Offline学习的目标&lt;/strong&gt;：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;regret_k = \frac{1}{k}\sum_{t=1}^{k}f(\theta_t, z_{k})-min_{\theta^*\in \Theta}\frac{1}{k}\sum_{t=1}^{k}f(\theta^*, z_t)&lt;/script&gt;

&lt;p&gt;  可以看出，对于Offline学习，我们只是希望训练最终output出的参数能离全局最优参数比较近；而对于Online学习,我们认为每个之前轮次的样本t训练产生的loss均被进入最终的loss，所以这就要求我们关注整个训练过程任何时刻产生的loss。由上面两组目标的差异，我们不难理解前者更适合线上数据的实时迭代，一定程度上保证了前面批次的样本的预测结果不至于太差；此外，在线学习的另一好处是帮助我们处理大规模（TB级）数据，因为每个样本我们仅需要在训练时使用一次，所以可以边读取数据边训练模型。&lt;/p&gt;

&lt;p&gt;  一种最简单的在线学习的方法是使用OGD(Online Gradient Descent)，这里需要指出OGD实际上就是我们了解的SGD，这里使用online，只是为了强调在绚练的过程中不再强调样本是IID的了。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{k+1}=proj_{\Theta}(\theta_k-\eta_k\Delta  l(\theta_k))&lt;/script&gt;

&lt;p&gt;  其中&lt;script type=&quot;math/tex&quot;&gt;proj_{\Theta}(v) = argmin_w\|w-v\|_{2}&lt;/script&gt;是将v进行映射的函数。这中映射一般发生在参数需要归一化等情况下，只是对梯度下降得到参数做变形。&lt;/p&gt;

&lt;!-- ### 2. BPR

&amp;emsp; 贝叶斯在线学习（Bayesian Online Learning）把上一轮更新后的模型看做是先验分布，通过加入新的样本数据，更新得到后验分布。后验分布就是本轮更新模型的结果。熟悉贝叶斯思想的同学应该了解，经典的MCMC算法中便运用了该思想。   
&amp;emsp; 由上述的基本思想可知，BPR要求先验分布和后验分布是同分布(先验与似然函数共轭)的，否则这一轮的后验分布不能作为下一轮的先验分布。在实践中当这一假设不成立时，可以将后验分布近似，近似(比如KL距离大小)到其先验的分布。
&amp;emsp; BRP是贝叶斯在线学习最经典的例子，该模型认为可以假设机器学习模型的参数服从独立的正态分布，

$$
p(w|y) \sim p(y|w) p(w)
$$ --&gt;

&lt;h3 id=&quot;2-ftrl-proximal&quot;&gt;2. FTRL-Proximal&lt;/h3&gt;
&lt;p&gt;  &lt;strong&gt;FTRL&lt;/strong&gt;是从传统的求解方法Gradient Descent的基础上一步步发展而来的。从FTRL的名字（Follow the regularized leader）中可以看出其尝试解决Regularization的问题，因为在线学习的过程中，我们一般希望得到的模型更具泛化能力，而不是严重依赖于某些数据批次，因此在SGD的基础上，我们想要进一步产生稀疏的参数w（当参数w大部分为0时，也方便了数据存储），下面介绍如何实现这一目标。 &lt;br /&gt;
  一种方法是直接加入参数的L1正则项，这也是&lt;strong&gt;LASSO&lt;/strong&gt;(Least Absolute Shrinkage and Selection Operator)的最关键思想。但是由于Norm 1的存在，该惩罚函数在&lt;script type=&quot;math/tex&quot;&gt;x=0&lt;/script&gt;处不可导，可以使用次梯度（Subgradient）来代替梯度。  &lt;br /&gt;
  虽然正则项的加入，可以一定程度上趋势在线学习的结果具有一定的稀疏性，但是其实践效果并不佳。主要原因是即使引入了L1正则项，更新后的参数恰好为0的概率也微乎其微（一旦不恰好为0，那么数据稀疏化的目标就没真正实现）。根据这个问题，也有一些解决方案提出（Truncated Gradient, 2009 Microsoft），比如如果参数足够小（设置阈值），直接令其等于0，但这种方法也有一定的局限性，因为参数小，有可能是因为其确实是无意义的特征；但也有可能是因为该特征刚被更新少数次，这种情况下做截断就不合理了。 &lt;br /&gt;
  另外一个解决方案是Google的研究员提出了一种叫做&lt;strong&gt;FOBOS&lt;/strong&gt;（Forword Backward Splitting）的更新策略，其将参数更新的过程分为两步，第一步进行梯度下降，第二步处理正则化加入稀疏性。：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{t+\frac{1}{2}} = w_t - \eta_tg_t\\
w_{t+1} = \mathop{\arg\min}_{w} \frac{1}{2}\|w-w_{t+\frac{1}{2}}\|_2^2 + \eta_{t+\frac{1}{2}}\lambda\|w\|_1&lt;/script&gt;

&lt;p&gt;  两步合并之后可得：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{t+1} = \mathop{\arg\min}_{w} \frac{1}{2}\|w-w_{t}+\eta_tg_t\|_2^2 + \eta_{t+\frac{1}{2}}\lambda\|w\|_1&lt;/script&gt;

&lt;p&gt;  该式右边我们对&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;求导，可以得到：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w-w_t+\eta_tg_t + \eta_{t+\frac{1}{2}}\delta(\lambda\|w\|_1)=0&lt;/script&gt;

&lt;p&gt;  有上式可知&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\mid w_t-\eta_tg_t \mid &lt;\eta_{t+\frac{1}{2}}\lambda \rightarrow w_{t+1} = 0 %]]&gt;&lt;/script&gt; 这一动作替代了替代了参数截断的方法，实现了稀疏性。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;FTRL&lt;/strong&gt;则与FOBOS师出一脉，下面给出FTRL的参数更新方程。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
w_{t+1} &amp;=&amp; \mathop{\arg\min}_{w} \ (g_{1:t}w+\frac{1}{2}\sum_{s=1}^{t}\sigma_s\|w-w_s\|_2^2 +\lambda_1\|w\|_1)\\
 &amp;=&amp; \mathop{\arg\min}_{w} \ (g_{1:t} - \sum_{s=1}^t\sigma_sw_s)w + \sum_{s=1}^t\sigma_s\|w\|_2^2 + \lambda_1\|w\|_1+(const)
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;  其中&lt;script type=&quot;math/tex&quot;&gt;g_{1:t} = \sum_{s=1}^tg_s&lt;/script&gt;且&lt;script type=&quot;math/tex&quot;&gt;g_s&lt;/script&gt;表示第s组sample对应的梯度，&lt;script type=&quot;math/tex&quot;&gt;\sigma_s&lt;/script&gt;表示learning rate, 对应的有&lt;script type=&quot;math/tex&quot;&gt;\sigma_{1:t} =\sum_{s=1}^t \sigma_s = \frac{1}{\eta_t}&lt;/script&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jul 2017 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2017/07/27/Online-Learning/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2017/07/27/Online-Learning/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Ranking &amp; CTR Model</title>
        <description>&lt;h3 id=&quot;1-ranking-question&quot;&gt;1. Ranking Question&lt;/h3&gt;
&lt;p&gt;  实践中的推荐系统一般包含两类问题：第一类是召回，即挑选出待推荐的候选集；第二类是排序，即对候选集进行排序。 &lt;br /&gt;
  排序，作为信息检索领域的核心问题，这些年来不断以新的形式出现在互联网的方方面面。比如在你在“今日头条”点击了一条刘强东和奶茶妹妹的新闻，在接下来的若干天里，你的信息流首页里，相关的信息将持续排在较高的位置。以上便是在推荐系统(Recommender System)领域中排序的应用。 &lt;br /&gt;
 而将机器学习与排序结合到一起，是近20年以来大家常用的做法。机器学习下的排序问题可以概括为：用户给出一个query, 搜索引擎会匹配出一定数目的documents（候选推荐集）, 然后使用机器学习的模型f(q,d)结合用户特征、文章特征以及上下文信息(比如用户对结果进行了筛选)对documents进行排序。 MSRA的刘铁岩将MLR(Machine-learned Ranking)总结为三类：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pointwise &lt;br /&gt;
 认为每一个query-document对都对应一个得分(相关性)，因此该类MLR问题可以看作是回归问题，即训练Regreesion Model，来预测每一个query-ducoument的得分，再将document按照得分由高到低进行排序。&lt;/li&gt;
  &lt;li&gt;Pairwise &lt;br /&gt;
 看作是分类问题，比如把点击看做是正样本，展示而未被点击的document看做是负样本。&lt;/li&gt;
  &lt;li&gt;Listwise &lt;br /&gt;
 上述两种类型都没有考虑每个query下所有document之间的序列关系(只考虑了各个document的预测分). 而listwise考虑的是将一个ranking list作为一个instance进行训练，而非document。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; 有学者把上述MLR方法划分到基于协同过滤的排序（推荐）中，实际上我们能利用的信息不仅仅是用户、商品的ID、以及用户ID与商品ID对应的矩阵（打分（显式反馈）、点击（隐式反馈））。用户、商品的一些别的特征、以及本次用户检索中的上下文信息都可以加入其中，这种排序算法我们称之为基于特征的推荐（Feature-based Recommendation）。&lt;/p&gt;

&lt;h3 id=&quot;2-evaluation-measure&quot;&gt;2. Evaluation Measure&lt;/h3&gt;

&lt;p&gt; 对于MLR模型，其算法结果Evaluation的对象与一般机器学习分类器的有一定的不同，前者更关注相对顺序，而非绝对数值。常用的得Evaluation方法包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Normalized Discounted Cumulative Gain(NDCG)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 表示从第一个位置到第n个位置的累积折扣信息增益。每个位置的信息折扣增益为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(n) = Z_n \sum_{j=1}^{n}(2^{r(j)}-1)/log(1+j)&lt;/script&gt;

&lt;p&gt; (1) 其中&lt;script type=&quot;math/tex&quot;&gt;2^{r(j)}-1&lt;/script&gt;叫做信息增益(Gain)， &lt;script type=&quot;math/tex&quot;&gt;r(j)&lt;/script&gt;为排列在第&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;个文档的相关度，NDCG将相关度分为&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;个等级（比如设为5个等级的话，第1级最差为&lt;script type=&quot;math/tex&quot;&gt;2^1-1=1&lt;/script&gt;，第5级最好，为&lt;script type=&quot;math/tex&quot;&gt;2^5-1&lt;/script&gt;）。 &lt;br /&gt;
 (2) &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{log(1+j)}&lt;/script&gt;表示Positive Discount, j越大，该系数越小(大多数机器算法在未提及&lt;script type=&quot;math/tex&quot;&gt;log&lt;/script&gt;的底时，默认为&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;)。 &lt;br /&gt;
 (3) &lt;script type=&quot;math/tex&quot;&gt;Z_n&lt;/script&gt;为正则项，加入其的目的是使不同查询之间的DCG可以比较。一般地，取&lt;script type=&quot;math/tex&quot;&gt;Z_n&lt;/script&gt;为当前检索结果所有文档按相关度由高到底排列是计算出来的DCG。 &lt;br /&gt;
 因此，最大化NDCG来使好的结果排在靠前的位置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MAP(Mean Average Precision)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; k个query的准确率的平均。每个query准确率的定义为：&lt;script type=&quot;math/tex&quot;&gt;\sum_{j=1}^{n_i} P(j) y_{i,j}&lt;/script&gt;, 其中&lt;script type=&quot;math/tex&quot;&gt;P(j)&lt;/script&gt;为Precision, &lt;script type=&quot;math/tex&quot;&gt;y_{i,j}&lt;/script&gt;为相关性判断：取0和1。&lt;/p&gt;

&lt;h3 id=&quot;3--common-ranking-models&quot;&gt;3.  Common Ranking Models&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RankNet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  由于上述常用的评价函数不是连续可导的，因此无法通过梯度下降的方法训练分类器的参数。RankNet将目标函数替换机器学习中对于概率问题常用的目标函数：最小化Cross-Entropy(其实是连乘形式的极大似然估计取log，所以又叫做negative log likelihood，该式同时又为香农信息熵公式+相对熵(KL)化简之后的结果)：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_{ij} = -P_{i,j}log\hat{P}_{i,j} - (1-P_{i,j})log(1-\hat{P}_{i,j}) = -{P}_{i,j}\sigma(s_i - s_j) - log(1-\hat{P_{ij}}) = -{P}_{i,j}\sigma(s_i - s_j) + log(1+e^{\sigma(s_i-s_j)})&lt;/script&gt;

&lt;p&gt;  其中&lt;script type=&quot;math/tex&quot;&gt;s_i, s_j&lt;/script&gt;表示文档&lt;script type=&quot;math/tex&quot;&gt;i, j&lt;/script&gt;的算分函数&lt;script type=&quot;math/tex&quot;&gt;s = f(x_i; w)&lt;/script&gt;得到的文档得分。&lt;script type=&quot;math/tex&quot;&gt;P_{i,j}&lt;/script&gt;表示文档&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;应该排在文档&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;前面的概率，根据实际情况（信息增益等指标）取0， &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2}&lt;/script&gt; 和1。我们引入&lt;script type=&quot;math/tex&quot;&gt;S_{ij}&lt;/script&gt;来替代&lt;script type=&quot;math/tex&quot;&gt;P_{ij}&lt;/script&gt;，当文档&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;比&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;好时，我们令&lt;script type=&quot;math/tex&quot;&gt;S_{ij}=1&lt;/script&gt;，两文档相等时取0，否则取-1。即有：&lt;script type=&quot;math/tex&quot;&gt;P_{ij} = \frac{1}{2}(1+S_{ij})&lt;/script&gt;。则上式可以修改为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_{ij}= -\frac{1}{2}(1+S_{ij})\sigma(s_i - s_j) + log(1+e^{\sigma(s_i-s_j)})&lt;/script&gt;

&lt;p&gt;  &lt;script type=&quot;math/tex&quot;&gt;\hat{P}_{i,j}&lt;/script&gt;是由分类器估计出来的文档&lt;script type=&quot;math/tex&quot;&gt;i,j&lt;/script&gt;的得分&lt;script type=&quot;math/tex&quot;&gt;s_i, s_j&lt;/script&gt;后，计算出来的&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;应该排在文档&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;前面的概率。一般定义：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{P}_{i,j}=\frac{1}{1+e^{-\sigma(s_i-s_j)}}&lt;/script&gt;

&lt;p&gt;  因此我们将问题的目标函数转化为可微（可以通过梯度下降法来训练分类器）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;LambdaRank&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  这里我们来推导一下RankNet的梯度，来说明使用该梯度训练出来的模型可能具有的一些「我们不期望得到的」性质。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\frac{\delta L_{ij}}{\delta w}&amp;=&amp;\frac{\delta L_{ij}}{\delta s_i}\frac{\delta s_i}{\delta w} + \frac{\delta L_{ij}}{\delta s_j}\frac{\delta s_j}{\delta w}
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;  其中&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
\frac{\delta L_{ij}}{\delta s_i} &amp;=&amp; \frac{ \delta (-\frac{1}{2}(1+S_{ij})\sigma(s_i - s_j) + log(1+e^{\sigma(s_i-s_j)}))}{\delta s_i}\\
&amp;=&amp; -\frac{1}{2}(1+S_{ij})\sigma + \frac{e^{\sigma(s_i -s_j)}\sigma}{(1+e^{\sigma(s_i-s_j)})ln2} \tag{1}\\
&amp;=&amp; -\frac{\delta L_{ij}}{\delta s_j}\\
&amp;=&amp;\lambda_{ij}
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;  在LambdaMart作者给出的&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/MSR-TR-2010-82.pdf&quot;&gt;文章&lt;/a&gt;中，将上式（1）中的ln2忽略，可以得到：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{ij} = \sigma(\frac{1}{2}(1-S_{ij}) - \frac{1}{1+e^{\sigma(s_i-s_j)}})&lt;/script&gt;

&lt;p&gt;  因此，我们有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\delta L_{ij}}{\delta w} = \lambda_{ij}(\frac{\delta s_i}{\delta w} - \frac{\delta s_j}{\delta w})&lt;/script&gt;

&lt;p&gt;  那么对于单个文档&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;其移动的“方向”和“力度”取决于:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_i = \sum_{\{i, j\}\in P}\lambda_{ij} - \sum_{\{j, i\}\in P}\lambda_{ij}&lt;/script&gt;

&lt;p&gt;  而对于有序的pair：(i,j)，有&lt;script type=&quot;math/tex&quot;&gt;S_{ij}=1&lt;/script&gt;，我们将更关心头部结果的NDCG加进来，手动修改&lt;script type=&quot;math/tex&quot;&gt;\lambda_{ij}&lt;/script&gt;的定义：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{ij} = - \frac{\sigma}{1+e^{\sigma(s_i-s_j)}}\| \delta(NDCG)\|&lt;/script&gt;

&lt;p&gt;  其中&lt;script type=&quot;math/tex&quot;&gt;\delta(NDCG)&lt;/script&gt;表示文档对(i, j)互换位置之后NDCG的变化量。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;LambdaMart&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  使用MART(GBDT)作为LambdaRank中的打分器&lt;script type=&quot;math/tex&quot;&gt;f(x, w)&lt;/script&gt;，即为LambdaMart算法。&lt;/p&gt;

&lt;h3 id=&quot;4-other-feature-based-models&quot;&gt;4. Other Feature-based Models&lt;/h3&gt;

&lt;p&gt; 业界大部分的Ranking模型直接直接使用CTR（点击率预测模型）预测用户点击的可能性高低，然后按可能性高低对其排序。最经典的CTR模型是LR（Logisitc Regreesion)，其主要遇到的问题是需要手动的特征离散化、特征组合。GBDT是另一种比较经典的模型，由于是基于树的模型，所以其能够较好地处理连续型的特征。另外一个优点是完成了一定程度的特征组合（树的纵向深度）和特征离散化（分支），但其对于大量高维度的特征难以较好地处理（由于树的数目、深度等限制）。首先一个经典的模型就是将两者进行结合。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;4.1 GBDT + LR&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 2014年Facebook给出其在AD Click Predicting的一种实践：&lt;a href=&quot;http://quinonero.net/Publications/predicting-clicks-facebook.pdf&quot;&gt;Decision Tree + Logistic Regression&lt;/a&gt;。该文章指出直接使用GDBT容易造成过拟合，而将样本数据到GDBT叶子结点的索引（Leaf Index）作为Embedding Vector，输入到逻辑回归里。 &lt;br /&gt;
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
使用XGBoost对test集合进行one-hot encoder
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# step 1: bst为XGBoost训练得到模型，通过训练集1，获取one-hot样本数据&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneHotEncoder&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ohe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneHotEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ytrain1_leaf_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtrain1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred_leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ohe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ytrain1_leaf_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# step 2: 将保留的第二部分训练集转化成one-hot&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ytrain2_leaf_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtrain2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred_leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ohe_feature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ohe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ytrain2_leaf_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# step 3: Training LR&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ohe_feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; 但是该方法还是未能存储大量高维度的特征（比如用户ID，商品ID），这时可以将除了这些维度之前的所有特征作为GDBT的输入，而将id类离散特征与GDBT的输出进行组合，放入到LR模型中。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;4.2 Factorization Machine（分解机）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 特征工程中一个重要的环节是特征组合，但在实际的操作中，由于特征离散化(One-Hot编码)等操作，导致原始数据维度十分大，一旦再进行维度组合，将会出现维度爆炸问题。 最后形成的特征矩阵是一个高维度的稀疏矩阵。Factorisation Machine通过直接构造模型，“自动化”地完成特征组合操作。&lt;strong&gt;分解机其实是借鉴了基于协同过滤推荐方法中的矩阵分解的思想（这里只是将维度从用户ID、商品ID扩展到了用户、商品的各种维度），即通过构造用户、商品的隐向量，使用其点积作为预测值&lt;/strong&gt;。考虑二阶的原始维度为n个的特征组合，其模型的表达式如下。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y(X) = w_0 + \sum_{i=1}^{n}w_ix_i + \sum_{i=1}^{n-1}\sum_{j=i+1}^{n} w_{ij}x_ix_j&lt;/script&gt;

&lt;p&gt; 可以看出为了训练&lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt;，往往需要大量非零的&lt;script type=&quot;math/tex&quot;&gt;x_i, x_j&lt;/script&gt;，这对于稀疏的矩阵来说是不现实的，因此直接对该回归函数进行训练，不妥。 &lt;br /&gt;
 考虑到&lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt;可以表示为一个矩阵（对角元素可以手动修改为正实数），该矩阵可以进行分解&lt;script type=&quot;math/tex&quot;&gt;W=V^TV&lt;/script&gt;（类比与用户对商品的打分矩阵可以分解为用户矩阵（每个用户通过一个隐向量表示，商品也是）和商品矩阵的乘积形式），因此V中第&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;列便是第&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;维特征的隐向量。故问题转换为求解分解后的矩阵V，模型的表达式修订下式，其中&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
&lt;a,b&gt; %]]&gt;&lt;/script&gt;为向量&lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt;的点积：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
y(X) = w_0 + \sum_{i=1}^{n}w_ix_i + \sum_{i=1}^{n-1}\sum_{j=i+1}^{n} &lt;v_i, v_j&gt;x_ix_j %]]&gt;&lt;/script&gt;

&lt;p&gt;  上述变化有两点好处&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;二次项的系数由&lt;script type=&quot;math/tex&quot;&gt;\frac{n(n-1)}{2}&lt;/script&gt;减小到&lt;script type=&quot;math/tex&quot;&gt;kn&lt;/script&gt;其中&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;为隐向量的维度，因此参数的数目大大降低。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;任何包含特征&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;的样本数据，都可以用来学习隐向量&lt;script type=&quot;math/tex&quot;&gt;v_i&lt;/script&gt;，这种很大程度上避免了数据稀疏情况下，仍需要包含&lt;script type=&quot;math/tex&quot;&gt;i,j&lt;/script&gt;两个维度上都非零的样本数据来学习&lt;script type=&quot;math/tex&quot;&gt;w_{ij}&lt;/script&gt;的窘境。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 剩下的问题，和传统的回归问题无异。比如可以用MSE作为损失函数；在比如作为分类问题时，同LR使用Sigmoid处理输出结果y。一般地，可以给出FM模型的训练步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;初始化权重&lt;script type=&quot;math/tex&quot;&gt;w_0, w_1...w_n 以及隐向量矩阵V&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;梯度的方法，迭代更新各参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 台湾大学的Yu Chin Juan基于FM提出了Field-aware Factorization Machine(FFM)模型，其认为同性质的特征可以被归到一个Field上，比如男，女同属于性别Filed；游戏和化妆品分属于商品类别Field；1月1日和10月1日分别属于日期Filed。而做特征组合时，性别Filed=男这个特征与商品类别和日期进行关联时，使用不同的隐向量。其可以表达为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
y(X) = w_0 + \sum_{i=1}^{n}w_ix_i + \sum_{i=1}^{n-1}\sum_{j=i+1}^{n} &lt;v_{i,f_{j}}, v_{j,f_{i}}&gt;x_ix_j %]]&gt;&lt;/script&gt;

&lt;p&gt; 其中&lt;script type=&quot;math/tex&quot;&gt;f_{j}&lt;/script&gt;为第&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;个特征所属于的field。该模型共有nf为隐向量，nfk个组合参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;4.3 Deep Learning Model&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 将深度学习与推荐排序结合到一起可以有两个切入点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;4.3.1 使用深度学习进行特征抽取（Extracting Side Features with Deep Learning）&lt;/strong&gt; &lt;br /&gt;
  了解CNN的用户应该知道，其模型其实可以拆分为两层；第一层为特征提取层（Conv Layer, Pool Layer），第二层为全连接分类层(Fully Connected Network)。其在ImageNet等数据集上之所以能取得成功，是因为其特征提取层能够抽象出图像多方面、多层次的特征。 &lt;br /&gt;
  在推荐排序领域，多数的工作采用矩阵分解的思路分别对用户、产品训练其隐向量（Embedding Vector）。常用的训练模型包括多层感知机（MLP）、去噪自动编码机（DAE）等。 &lt;br /&gt;
  此外也有尝试将上述得到的隐向量和基于协同过滤模型得到的隐向量结合（相加），从而得到两者的优点（比如前者模型能一定程度上解决Cold Start问题）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;4.3.2 深度交互函数学习（Learning Interaction Function）&lt;/strong&gt; &lt;br /&gt;
   另外一种操作是在通过一定方法得到用户、商品的隐向量之后不直接进行内积运算得到预测结果，而是把两个隐向量作为神经网络(比如Averaging Pool层+全连接层)的输入去学习“交互函数”来得到预测结果，该模型被称为NCF（Neural Collaborative Filtering）；  &lt;br /&gt;
   上述使用Averaging Pool层是假设各个原始One-Hot编码的输入是相互独立的，这里进一步改进Pool层，使用Bilinear Pooling层，相当于参考了分解机，引入了Feature的组合。该模型称为attribute-aware NCF. &lt;br /&gt;
   Wide&amp;amp;Deep以及Deep Crossing模型分别是Google和MS在2016年提出的模型。其将部分维度进行Embedding学习，再与部分未Embeddingd的维度进行拼接（Concatenation）然后进行MLP学习，最后一层是一个Softmax分类器。两家的区别是MS家多了一层Residual component解决梯度弥散问题。理所当然的，在维度拼接层，可以引入Bilinear Interaction Pooling：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f_{BI}(v_x) = \sum_{i=1}^n\sum_{j=i+1}^{n}&lt;v_i, v_j&gt;x_ix_j %]]&gt;&lt;/script&gt;

&lt;p&gt; 有模型尝试将FM与深度学习模型结合，使用FM进行Embedding，深度学习做分类器。在FM层，对各个Category Field分别做FM回归。比如一共有100个Category Field则最终得到一个100维的Embedding。然后把这100维数据作为深度模型的输入。&lt;a href=&quot;https://arxiv.org/abs/1703.04247&quot;&gt;哈工大深研所和华为&lt;/a&gt;借鉴Wide&amp;amp;Deep的思想，将Wide中的广义线性模型替换成FM，除了此外Wide&amp;amp;Deep模型的Wide端和Deep端的输入不尽相同，因此仍需要“特征预筛选”。而这篇文章直接修改成了一个端到端的模型。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/CTR-DeepFM.png&quot; width=&quot;570&quot; height=&quot;280&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;附推荐排序领域常用术语&quot;&gt;附(推荐&amp;amp;排序领域常用术语):&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CTR&lt;/strong&gt;(Click Through Rate) 点击达成率，实际点击次数/展示次数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPC&lt;/strong&gt;(Cost per Click) 点击成本，成本/Click次数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CVR&lt;/strong&gt;(Conversion Rate) 从用户点击到最终完成注册或购买的转化率。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Factorization Machine&lt;/strong&gt; 分解机，一种自动设置特征组合的回归方法。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lookalike&lt;/strong&gt; 人群扩散，通过一批已有活跃用户（种子用户），找到潜在的客群。思路是挖掘种子用户的典型特征，然后在全量用户群（比如说腾讯的Wechat）&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 29 Jun 2017 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2017/06/29/Ranking/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2017/06/29/Ranking/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Bayesian Method and Probabilistic Programming</title>
        <description>&lt;h3 id=&quot;1-basic-defination&quot;&gt;1. Basic Defination&lt;/h3&gt;

&lt;p&gt;  &lt;strong&gt;概率图模型&lt;/strong&gt;，构造该模型的目的是为方便表达变量间的概率相关关系。概率图模型大致可以分为两类：“有向无环”的贝叶斯网络和“无向图”马尔科夫网。我们常说的&lt;strong&gt;马尔科夫链&lt;/strong&gt;，其实是有方向的贝叶斯网络。在时间序列中其方向表示时间的推进。之所以称之为“隐”马尔科夫链，是因为我们能获取的信息是马尔科夫链上的各个Node是观测值，而实际上，我们假设每个Node是状态变量，变量空间是N个可能的离散取值；同时在每个Node上的观测值依赖于该状态变量，其取值可以是离散或连续的。 &lt;br /&gt;
  &lt;strong&gt;马尔科夫链&lt;/strong&gt;， 其某一时刻的状态变量仅与上一时刻相关（无记忆性，构造该特性的目的是为了简化复杂的现实模型）。马尔科夫链的组成元素包括状态变量空间、观测变量空间以及：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;状态转移概率&lt;script type=&quot;math/tex&quot;&gt;a_{ij}= P(y_{t+1} = s_j \mid y_t=s_i)&lt;/script&gt;， 状态转移矩阵是一个&lt;script type=&quot;math/tex&quot;&gt;N\times N&lt;/script&gt;的矩阵&lt;/li&gt;
  &lt;li&gt;输出观测值概率&lt;script type=&quot;math/tex&quot;&gt;b_{ij} = P(x_t = o_j \mid y_t=s_i)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;初始状态概率，即在初始时刻各状态出现的概率&lt;script type=&quot;math/tex&quot;&gt;\pi_i = P(y_1 = s_i)&lt;/script&gt; 其中 &lt;script type=&quot;math/tex&quot;&gt;1\leq i \leq N&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;  &lt;strong&gt;马尔科夫链的应用&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;根据模型参数（&lt;script type=&quot;math/tex&quot;&gt;a_{ij}, b_{ij}, \pi&lt;/script&gt;）推测观测，根据历史的观测值，预测未来的观测值。比如根据历史时间序列，预测将来的时间序列。&lt;/li&gt;
  &lt;li&gt;根据模型参数（&lt;script type=&quot;math/tex&quot;&gt;a_{ij}, b_{ij}, \pi&lt;/script&gt;）以及观测值&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;推测状态变量。比如语音识别任务中，将语音认为是观测，文本认为是状态变量。&lt;/li&gt;
  &lt;li&gt;给定观测值x, 推测模型参数（&lt;script type=&quot;math/tex&quot;&gt;a_{ij}, b_{ij}, \pi&lt;/script&gt;）。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-马尔科夫随机场&quot;&gt;2. 马尔科夫随机场&lt;/h3&gt;

&lt;h3 id=&quot;plus-马尔科夫链中的经典问题&quot;&gt;Plus 马尔科夫链中的经典问题&lt;/h3&gt;

&lt;p&gt;  &lt;strong&gt;Gambler’s ruin problem&lt;/strong&gt;, A gambler, at each play of the game: Probability &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; of winning 1$, probability &lt;script type=&quot;math/tex&quot;&gt;1-q&lt;/script&gt; of losing 1$. At the beign, he has i$. Question: The probability that fortune will reach N before reaching 0.   &lt;br /&gt;
  对于马氏链上的Node，我们定义状态&lt;script type=&quot;math/tex&quot;&gt;X_n&lt;/script&gt;为时间n下该赌徒的财富，基于该状态可以定义状态转移概率，我们有&lt;script type=&quot;math/tex&quot;&gt;P_{00} = P_{NN} = 1&lt;/script&gt;。同时&lt;script type=&quot;math/tex&quot;&gt;\forall i \in 1...N-1&lt;/script&gt;， 有&lt;script type=&quot;math/tex&quot;&gt;P_{i, i+1} = p, P_{i+1, i} = 1-p&lt;/script&gt;。 我们用&lt;script type=&quot;math/tex&quot;&gt;P_{i}&lt;/script&gt;表示从i美刀，到能取得N财富的概率，则可以建立递推关系：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{i} = p \times P_{i+1} + (1-p) P_{i-1}&lt;/script&gt;

&lt;p&gt;  该式子等价于：&lt;script type=&quot;math/tex&quot;&gt;(P_{i-1} - P_i) = \frac{p}{q}(P_i - P_{i+1})&lt;/script&gt;, 递推，两边求和，且&lt;script type=&quot;math/tex&quot;&gt;P_0 = 0&lt;/script&gt;，可以得到&lt;script type=&quot;math/tex&quot;&gt;P_i&lt;/script&gt;的公式。 &lt;br /&gt;
  或者，该问题可以使用Recurent, Transient来解释，在该赌博问题中i = 1….N-1为Transient状态，而i = 1或N 为Recurent状态。根据从&lt;script type=&quot;math/tex&quot;&gt;T\rightarrow R&lt;/script&gt;下&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{ij} = \sum_{k \in T} P_{ik}f_{kj} + \sum_{k\in R} P_{ik}&lt;/script&gt;

&lt;p&gt;  故，有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{iN} = P_{i,i+1}f_{i+1, N} + P_{i,i-1}f_{i-1, N}\\
= pf_{i+1, N} + (1-p)f_{i-1, N}&lt;/script&gt;

&lt;p&gt;Reference: &lt;br /&gt;
周志华《机器学习》&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Mar 2017 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2017/03/28/Bayesian-Method/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2017/03/28/Bayesian-Method/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Boosting Model: AdaBoost GBDT和XGBoost</title>
        <description>&lt;h3 id=&quot;1-adaboost&quot;&gt;1. AdaBoost&lt;/h3&gt;
&lt;p&gt;  AdaBoost是借助Boosting思想解决二分类问题。其模型的基本思路是通过学习多个分类器（比如单层的决策树Decision Stump），每一轮学习新的分类器，更加关注上一轮被错误划分的样本点。因此该模型需要重点关注两个点：1.如何确定分类器的权重；2.如何调整样本权重，从而在下一轮中更加“关注”错分的样本。  &lt;br /&gt;
  介绍Adaboost可以从不同的角度来入手，比如通过列出单回合的指数损失函数&lt;script type=&quot;math/tex&quot;&gt;e^{-\alpha_t f(x)h_t(x)}&lt;/script&gt;，令其值最小化，可以得到新一轮的分类器如何设置权重；通过列出additive model的目标函数&lt;script type=&quot;math/tex&quot;&gt;e^{-f(x)(H_t(x)+h_{t+1}(x))}&lt;/script&gt;使用泰勒展开，可以推导出样本权重的调整规则。但下文将直接使用AdaBoost算法规则的Intuition来解释分类的权重、样本的权重为什么这么设置。&lt;/p&gt;

&lt;p&gt;  首先给出分类错误率的定义，对于第&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;轮，指示函数&lt;script type=&quot;math/tex&quot;&gt;I(·)&lt;/script&gt;，样本权重&lt;script type=&quot;math/tex&quot;&gt;u_i&lt;/script&gt;：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\varepsilon_t = \frac{1}{N}\sum_{i=1}^{N}u_i I(y_i \neq \tilde{y_i})&lt;/script&gt;

&lt;p&gt; 其实可以证明最小化指数损失函数等价于最小化错误率。&lt;/p&gt;

&lt;p&gt;  在生成一个分类器后，我们要生成该分类器的权重。理所应当的想法是该权重和分类器的错误率相关：当错误率为&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2}&lt;/script&gt;时，分类器相当于乱猜，权重应该为0；如果分类器的错误率为0，则权重应该非常大。则权重可以设置为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha_t = \frac{1}{2}ln\frac{1-\varepsilon_t}{\varepsilon_t}&lt;/script&gt;

&lt;p&gt;  再考虑样本权重设置，我们希望本轮的分类器在处理下一轮调整后的样本时，表现地非常差：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{u_{t+1}I(y_i \neq \tilde{y_i})}{u_{t+1}I(y_i \neq \tilde{y_i}) + u_{t+1}I(y_i = \tilde{y_i})} =\frac{1}{2}&lt;/script&gt;

&lt;p&gt;  因此在&lt;script type=&quot;math/tex&quot;&gt;t+1&lt;/script&gt;轮，我们应该将上一轮错误划分样本和正确划分的样本权重调整为相同。一种最直接的调整方式就是乘上对方，并除以一个固定值(两者之和)，即可以变形为：分别乘以&lt;script type=&quot;math/tex&quot;&gt;(1-\varepsilon_t)、\varepsilon_t&lt;/script&gt;，在做缩放(Scale)，可以得到:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;incorrect  \leftarrow incorrect \times \sqrt{\frac{1-\varepsilon_t}{\varepsilon_t}} =incorrect \times e^{\alpha_t}\\
correct  \leftarrow correct \times \sqrt{\frac{\varepsilon_t}{1-\varepsilon_t}} =correct\times e^{-\alpha_t}&lt;/script&gt;

&lt;p&gt;  这里最后再提一个概念，即样本权重调整(Weight Resampling)，在具体操作时不是将权重直接乘以&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;，而是&lt;script type=&quot;math/tex&quot;&gt;u_i loss(y_i, \tilde{y_i})&lt;/script&gt;。对于无法进行该操作的分类器，可以采用Resampling的方法，即通过调整抽样概率实现样本权重的调整。&lt;/p&gt;

&lt;h3 id=&quot;2-gbdt和xgboost&quot;&gt;2. GBDT和XGBoost&lt;/h3&gt;

&lt;p&gt;上面介绍了Adaboost，而Adaboost实际上可以用最速下降法(或者我们下面要讲的Gradient Boosting)来解释，其实质是一个使用指数损失函数解决二分类问题的特殊情况下的最速下降模型。下文要考虑的是，如果我们的损失函数不再是使用指数损失函数，更一般情况下的“Adaboost”便是梯度提升模型。&lt;/p&gt;

&lt;h4 id=&quot;21-回归树&quot;&gt;2.1 回归树&lt;/h4&gt;
&lt;p&gt;在讲GDBT(Gradient Boosting Decision Tree)之前, 我们先讲&lt;strong&gt;回归树&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;  不同于分类树算法使用熵作为分枝的条件，回归树采用最小二乘误差来确定分支的条件，具体操作是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;挑选待分割的变量&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;(依次遍历各待分割变量，找到最好的那个),&lt;/li&gt;
  &lt;li&gt;固定变量x后，遍历地设置切分点s，划分为&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
x&lt;=s %]]&gt;&lt;/script&gt;和&lt;script type=&quot;math/tex&quot;&gt;x&gt;s&lt;/script&gt;两个子节点，子节点的输出值是各自的均值，然后计算两个子节点各自的二乘误差并求和。挑选使二乘误差最小的切分点。对子节点递归上述操作，指导满足最终停止条件。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;22-提升树&quot;&gt;2.2 提升树&lt;/h4&gt;
&lt;p&gt;  &lt;strong&gt;Boosting&lt;/strong&gt; 意为提升；其在操作时，先从初始训练集训练出一个基学习器；再根据学习器的结果对训练样本的分布进行调整，使之前预测错误的样本在后续的预测中得到更多的关注，通常预测准确性高的学习器具有较高的学习的权重。&lt;/p&gt;

&lt;p&gt;  Boosting 使用公式来表达：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = w_0 + \sum_{m=1}^{M}w_m\phi_{m}(x)&lt;/script&gt;

&lt;p&gt;  &lt;strong&gt;提升树（Boosting Tree）&lt;/strong&gt;则是在每轮生成树的过程中使用前面上一颗树各样本的残差项作为预测值(&lt;script type=&quot;math/tex&quot;&gt;y_i&lt;/script&gt;)，去生成新的树。&lt;/p&gt;

&lt;h4 id=&quot;23-梯度提升树&quot;&gt;2.3 梯度提升树&lt;/h4&gt;
&lt;p&gt;  有些时候我们通过谨慎地区分各个概念可以方便我们理解各个模型的关联关系，这里我们要需要谨慎对待的概念是GB算法(Gradient Boosting Algorithm)和GBDT(Gradient Boosting Decision Tree， 又名Multivariate Adaptive Regreesion Tree或MART)，后者只是前者的一种具体实现。下面首先要介绍Gradient Boosting算法:一种通过确定任意损失函数的梯度，以及更新步长来“boosting”的算法；接下来以GBDT为例，介绍Gradient Boosting算法的一种通过回归树作为弱学习器的实现。&lt;/p&gt;

&lt;h5 id=&quot;231-gradient-boosting&quot;&gt;2.3.1 Gradient Boosting&lt;/h5&gt;
&lt;p&gt;  梯度提升算法是使用函数梯度下降(Function Gradient Descent)的方法，使用连续多个函数（分类器）沿着函数梯度下降的方向做优化，从而使损失函数最小化。理论上任意可以微的损失函数都适用于该算法。下面是算法实现的基本步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;初始化常数项&lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;作为初始函数&lt;script type=&quot;math/tex&quot;&gt;F_0&lt;/script&gt;，该参数里可以理解为线性模型的常数项bias&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F_0(x) = argmin_{\gamma} \sum_{i=0}^N L(y_i, \gamma)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;对于迭代轮次m=1到M:
    &lt;ul&gt;
      &lt;li&gt;计算梯度残差(gradient residual)：&lt;script type=&quot;math/tex&quot;&gt;r_{im} = - [\frac{\delta L(y_i, F(x_i))}{\delta F(x_i)}]_{F(x) = F_{m-1}(x)}&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;适用学习器&lt;script type=&quot;math/tex&quot;&gt;h_m(x)&lt;/script&gt;拟合该残差, 训练集为&lt;script type=&quot;math/tex&quot;&gt;\{(x_i, r_{im})\}&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;计算步长&lt;script type=&quot;math/tex&quot;&gt;\gamma_m= arg min_{\gamma}\sum_{i=1}^{N}L(y_i, F_{m-1}(x_i)+\gamma h_m(x_i))&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;适用更新方程：&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F_m(x) = F_{m-1}(x)+\gamma_m h_m(x)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;得到最终模型：&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F_M(x)&lt;/script&gt;

&lt;h5 id=&quot;232-gradient-boosting-decision-tree&quot;&gt;2.3.2 Gradient Boosting Decision Tree&lt;/h5&gt;

&lt;p&gt;  而GBDT是将上述GB算法中的学习器替换为回归树，并对固定步长&lt;script type=&quot;math/tex&quot;&gt;\gamma_m&lt;/script&gt;做了修正，令每个叶子结点的&lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;相互独立，因此有&lt;script type=&quot;math/tex&quot;&gt;\gamma_{jm}&lt;/script&gt;，其中&lt;script type=&quot;math/tex&quot;&gt;j\in \{1..J_m\}&lt;/script&gt;为叶子结点的序号。 &lt;br /&gt;
  因此GBDT与一般形式的GB算法相比，只在一维最优化步长&lt;script type=&quot;math/tex&quot;&gt;\gamma_m&lt;/script&gt;处有差异，下面给出步长的方程式：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\gamma_{jm} = argmin_{\gamma} \sum_{x_i\in R_{jm}} L(y_i, F_{m-1}(x_i)+\gamma)\\
F_m(x) = F_{m-1}(x) + \sum_{j=1}^{J_m}\gamma_{jm} I(x\in R_{jm})&lt;/script&gt;

&lt;h4 id=&quot;24-xgboost&quot;&gt;2.4 XGBoost&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;模型细节上的变化&lt;/strong&gt;，XGBoost是GBDT的基础上，做了一些细节上的修改。这些修改包括：1.加入正则项（包括对叶子结点数目的一次项惩罚和回归树输出值的二次项惩罚）， 2.将泰勒一阶展开修改修改为二阶展开。3. 两个实践操作被加入到模型中防止过拟合: （1）Shrinkage: 给每一步的叶子结点的值乘上一个小于1的值，类似于随机梯度下降中调整学习速率，给未来的子树更多的提升空间。（2）column sampling, 类似于随机森林里的特征采样。&lt;/p&gt;

&lt;p&gt;Xgboost在每一颗子树时，当前阶段的损失函数可以由一阶梯度、二阶梯度的值（每个样本有&lt;script type=&quot;math/tex&quot;&gt;g_i = \delta_{\hat{y}^{t-1}}l(y_i, \hat{y}^{t-1}), h_i = \delta^2_{\hat{y}^{t-1}}l(y_i, \hat{y}^{t-1})&lt;/script&gt;两个值）以及各叶子的值(变量)表示，因此可以列出损失函数是叶子结点值的最优化问题，不同的特征分割方法决定了叶子值的大小，以及损失函数的最优值。因此每一次分割时，可以计算当前的损失函数最优值是多少，作为是否进行分割的依据。下式中&lt;script type=&quot;math/tex&quot;&gt;g_i, h_i&lt;/script&gt;分别为一阶、二阶梯度，&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;为叶子结点的数目, &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;为树的结构。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L(q) = -\frac{1}{2}\sum_{j=1}^T \frac{(\sum_{i\in I_j}g_i)^2}{\sum_{i\in I_j}h_i+\lambda} + \lambda T&lt;/script&gt;

&lt;p&gt;树的训练不是最优的，而是基于贪心算法的，每一次分割会增加一个左、右子树，带入上述损失函数的计算公式可以得到一个loss函数值的增加，同时上一个结点消失带来的损失值的消失要减掉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;除此之外，Xgboost还有一些工程上的优化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Split Finding Algorithm， 传统做法是对所有样本在该特征上进行排序，然后遍历所有可能的分割点，不同的特征在该步骤是可以同时进行的，但该前提是数据能够装入内存。根据该问题Xgboost的做法是：通过计算给特征的百分位数，（或者Weighted Quantile，其中权重为样本的二阶导数&lt;script type=&quot;math/tex&quot;&gt;h_i&lt;/script&gt;），将该特征上的样本分成几个桶，计算各个桶中的一、二阶梯度，然后计算以各split点下的loss值如何。或者直接构造一、二阶梯度的histograms。这几种划分的方法，Xgboost都是支持的。&lt;/p&gt;

&lt;p&gt;Sparsity-aware Split Finding，数据存在missing value，0值，one-hot编码等常常会导致特征是稀疏的。比如对于missing value，决策树会将missing值分别尝试都放在左子树或右子树，然后看具体哪个更好。&lt;/p&gt;

&lt;p&gt;Cache-aware Access提高CPU cache的利用率。由于数据的方式是按照某属性的sorted之后的顺序访问的，并不是对raw data在连续内存上的访问，对造成cache miss问题影响速度。对于exact greedy algorithm（不分桶），一种优化方法是是每个线程里申请一块buffer，把gradient信息放进去，在mini-batch level做梯度的accumulation。对于approximate algorithms（分桶）,通过将数据的block size进行调整，来提高cpu cache的命中率，每个block样本太多导致cache miss, 每个block样本太小导致并行计算的效率下降。评估后每个block的样本数量为&lt;script type=&quot;math/tex&quot;&gt;2^16&lt;/script&gt;时，效果最好。&lt;/p&gt;

&lt;p&gt;out-of-core computation减少block从磁盘读写花费的时间。使用的方法包括block列级别的压缩，block的分片（当数据存放在多个磁盘上时，分片的方法提高磁盘的读写）&lt;/p&gt;

&lt;h3 id=&quot;3-boosting算法为什么有效&quot;&gt;3 Boosting算法为什么有效&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;间接达到Regularization的目的
是有多个学习器然后“整合”，而“整合”本身具有Regularization的性质。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-staking模型融合&quot;&gt;4 Staking模型融合&lt;/h3&gt;
&lt;p&gt;  Boosting的思想是通过若干个较弱的学习器通过组合的方法得到模型的最终的预测结果，而Stacking的思想是通过若干学习器（第一层：初级学习器M个）分别学习原始输入，比如一个样本&lt;script type=&quot;math/tex&quot;&gt;(X, y)&lt;/script&gt;依次输入三个初级学习器，分别得到&lt;script type=&quot;math/tex&quot;&gt;\hat{y_1}, \hat{y_2}, \hat{y_3}&lt;/script&gt;，将其作为该样本下一层学习器（次级学习器）的输入，这样我们就把该样本数据重构为&lt;script type=&quot;math/tex&quot;&gt;(\hat{Y}, y)&lt;/script&gt;，其中&lt;script type=&quot;math/tex&quot;&gt;\hat{Y} = \hat{y_1}, \hat{y_2}, \hat{y_3}&lt;/script&gt;作为次级模型的输入。 &lt;br /&gt;
  但是上述的做法有较大的可能会过拟合（随机性太少），则可以采用K折交叉检验（或者留一法）。比如k折交叉检验中，对于第一组样本数据，我们使用第2到K组数据分别作为训练集，训练初级学习器，然后依次对第一组样本的各个样本进行预测，得出预测值&lt;script type=&quot;math/tex&quot;&gt;\hat{y_{i1}}, \hat{y_{i2}}, \hat{y_{i3}}..\hat{y_{iM}}&lt;/script&gt;作为第一组样本中样本&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;在次级学习机的输入。&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 08:00:04 +0800</pubDate>
        <link>http://localhost:4000/liuqianchao/update/2017/02/21/randomforest/</link>
        <guid isPermaLink="true">http://localhost:4000/liuqianchao/update/2017/02/21/randomforest/</guid>
        
        
        <category>liuqianchao</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
